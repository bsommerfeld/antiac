package de.bsommerfeld.antiac;

import de.bsommerfeld.antiac.click.ClickType;
import de.bsommerfeld.antiac.hibernate.enums.DatabaseDialect;
import de.bsommerfeld.antiac.hibernate.enums.DatabaseDriver;
import de.godcipher.gutil.config.BaseConfiguration;
import de.godcipher.gutil.config.annotation.ConfigHeader;
import de.godcipher.gutil.config.annotation.ConfigValue;
import de.godcipher.gutil.config.annotation.Configuration;
import java.util.Arrays;
import java.util.List;
import lombok.Getter;

@Getter
@Configuration(fileName = "antiac-config.yml")
@ConfigHeader(value = {"AntiAC Configuration", "Generated by gutil"})
public class AntiACConfig extends BaseConfiguration {

  @ConfigValue(
      name = "cps-storage-limit",
      description = "Stores the last x CPS internally to process.")
  private int cpsStorageLimit = 30;

  @ConfigValue(name = "allowed-clicktypes", description = "What click types should AntiAC track?")
  private List<String> allowedClickTypes =
      Arrays.stream(ClickType.values()).map(Enum::name).toList();

  @ConfigValue(name = "modern-feedback", description = "Enable modern feedback.")
  private boolean modernFeedback = true;

  @ConfigValue(name = "logging", description = "Whether to log flagged players.")
  private boolean logging = false;

  @ConfigValue(name = "database-url", description = "Database URL.")
  private String databaseUrl = "";

  @ConfigValue(name = "database-username", description = "Database username.")
  private String databaseUsername = "";

  @ConfigValue(name = "database-password", description = "Database password.")
  private String databasePassword = "";

  @ConfigValue(name = "database-driver", description = "The database driver to use.")
  private String databaseDriver = Arrays.toString(getOnlyEnumNames(DatabaseDriver.class));

  @ConfigValue(name = "database-dialect", description = "The database dialect to use.")
  private String databaseDialect = Arrays.toString(getOnlyEnumNames(DatabaseDialect.class));

  @ConfigValue(name = "commands", description = "Commands to execute when a player gets flagged.")
  private List<String> commands =
      List.of("kick %player%", "say %player% got flagged by %check% check!");

  @ConfigValue(
      name = "tps-protection",
      description = "Lowest allowed TPS until the TPS protection kicks in.")
  private int tpsProtection = 15;

  @ConfigValue(name = "violations", description = "Enable violation-based actions.")
  private boolean violations = true;

  @ConfigValue(
      name = "max-allowed-violations",
      description = "Maximum amount of violations allowed until the player gets flagged.")
  private int maxAllowedViolations = 8;

  @ConfigValue(name = "bedrock-players", description = "Whether the server allows bedrock players.")
  private boolean bedrockPlayers = false;

  private String[] getOnlyEnumNames(Class<? extends Enum<?>> enumClass) {
    return Arrays.stream(enumClass.getEnumConstants()).map(Enum::name).toArray(String[]::new);
  }
}
